syntax = "proto3";

// Given a URL which a client wants to serialize, the client will query
// available workers with the URL; these respond whith a list of supported
// formats. The client can then request one or more formats to be serialized. It
// receives a list of jobs - each job containing an ID, and the format. Jobs are
// independent; multiple formats can be extracted on the same job - so the same
// job id can be repeated, one time for each format.

// Once the URL is somehow serialized, the resulting artifacts can be stored by
// the server, with the client receiving download links. Clients can opt out of
// that and request payloads to be streamed back to them - assuming the server
// supports it for the particular format.

// Very informal description:
// client -> server: given this URL, how can you serialize it ?
// server -> client: here's a list of formats; some of them might require parameters
// client -> server: ok, I want the following formats...
// server -> client: i'll notify you when they are ready, and give you a link to download each artifact
// server -> client: i can also stream you updates on all the jobs you requested

// Intended use cases:
// - general structured scraping ⇒ JSON payloads
// - media ⇒ video file(s), subtitles, video description, stats
// - articles ⇒ readable (cleaned up) representation (ex: w. https://github.com/mozilla/readability)
// - any web page ⇒ archive (https://github.com/gildas-lormeau/SingleFile)

// Job states: RUNNING, PAUSED, FAILED, SUCCEEDED, CANCELLED
// Possible transitions:
// ● → RUNNING
// ● → PAUSED
// RUNNING → PAUSED | FAILED | SUCCEEDED | CANCELLED
// PAUSED → RUNNING | CANCELLED
// FAILED → ◉
// SUCCEDED → ◉
// CANCELLED → ◉

package serialize;

message Formats {
  message Format {
    string id = 1;
    string description = 2;
    bool streamable = 3;
    message Param {
      string id = 1;
      string description = 2;
      string type = 3;
      bool required = 4;
      string warning = 5;
    }
    repeated Param params = 4;
  }
  repeated Format formats = 1;
  repeated string warnings = 2;
}

message SerializeRequest {
  string url = 1;
  message Format {
    string id = 1;
    message Param {
      string id = 1;
      string value = 2;
      bool stream = 3;
    }
    repeated Param params = 3;
  }
  repeated Format formats = 2;
}

message SerializeResponse {
  message ArtifactPromise {
    string format = 1;
    string jobId = 2;
  }
  repeated ArtifactPromise artifactPromises = 1;
}

message JobCommand {
  enum Command {
    CANCEL = 0;
    PAUSE = 1;
    CONTINUE = 1;
  }
  Command command = 1;
}

message JobCommandResponse {
  enum Type {
    SUCCESS = 0;
    FAILURE = 1;
  }
  Type type = 1;
  string payload = 2;
}

message JobUpdate {
  string id = 1; // job id
  enum UpdateType {
    ERROR = 0; // job halted due to error
    WARNING = 1; // job encountered an issue, but continues
    PROGRESS = 2; // payload contains progress update
    CANCELLED = 3; // job cancelled
    COMPLETED = 4; // job completed 
    PAUSED = 5; // job paused - must receive "CONTINUE" to proceed
    DEBUG = 100; // debug message
  }
  UpdateType type = 2;
  string payload = 3;
}

message JobResult {
  string id = 1; // job id
  string payload = 2;
}

message Url {
  string url = 1;
}

message JobId {
  string id = 1;
}

service SerializeService {
  rpc GetFormats(Url) returns (Formats) {};
  rpc Serialize(SerializeRequest) returns (PersistResponse) {};
  rpc JobCommand(JobCommand) returns (JobCommandResponse) {};
  rpc JobUpdates(JobId) returns (stream JobUpdate) {};
  rpc JobResults(JobId) returns (stream JobResult) {};
}